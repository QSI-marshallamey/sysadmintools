#!/usr/bin/env python3
# This script keeps Okta user information up to date with data in Insperity
# 3 API calls per company to Insperity to pull relevant information for users
# 2 API calls to Okta to get and then update the user with latest data

### IMPORT LIBRARIES >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
import os; SYSADMINTOOLS_DIR = os.getenv('SYSADMINTOOLS_DIR')
import sys; sys.path.insert(1, f'{SYSADMINTOOLS_DIR}/lib')
import logging
import asyncio
import argparse
import requests
from datetime import datetime
from notion_client import Client
from AWS import AWS
from env import *

### PARSE ARGUMENTS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
parser = argparse.ArgumentParser()
parser.add_argument('-c', '--company', 
  help='provide name of one of the following companies: 4catalyzer, detect, tesseract, aithera, proteinevo, all',  
  metavar='' )
args = parser.parse_args()
if not args.company:
  print('You must include the company name as an argument. Use --help for more information')
  quit()

### LOGGER FUNCTION >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
def theLogger(logger_name, level=logging.INFO):
  """
  Method to return a custom logger with the given name and level
  """
  logger = logging.getLogger(logger_name)
  logger.setLevel(level)
  log_format = logging.Formatter('%(message)s')
  # Creating and adding the console handler
  console_handler = logging.StreamHandler(sys.stdout)
  console_handler.setFormatter(log_format)
  logger.addHandler(console_handler)
  # Creating and adding the file handler
  file_handler = logging.FileHandler(logger_name, mode='w')
  file_handler.setFormatter(log_format)
  logger.addHandler(file_handler)
  return logger

### MAIN FUNCTION >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
async def main(company):
  INSPERITY_API_KEY = AWS().getEnvVariable('/insperity/apiKey')
  NOTION_API_KEY = AWS().getEnvVariable('/notion/apiKey')
  NOTION =Client(auth=NOTION_API_KEY)
  
  DB_ID = ""
  USER = {}
  allEmployees = {}

  #> Create a log of this event
  logger = theLogger(f'{SYSADMINTOOLS_DIR}/log/{company}-insperityToNotion-{datetime.now().strftime("%Y-%m-%d-%H:%M")}.log')
  logger.debug(f'\nCreated log at {SYSADMINTOOLS_DIR}/log/{company}-insperityToNotion-{datetime.now().strftime("%Y-%m-%d-%H:%M")}.log')

  ### CALL INSPERITY APIs
  HEADERS = {'Authorization': f'APIKey {INSPERITY_API_KEY}'}
  COMMUNICATION_URL = f'https://api.insperity.com/public/company/{ORG_IDS[company.lower()]}/employeescommunication/v1'
  COMPANY_URL = f'https://api.insperity.com/public/company/{ORG_IDS[company.lower()]}/employeescompany/v1'
  POSITION_URL = f'https://api.insperity.com/public/company/{ORG_IDS[company.lower()]}/employeesposition/v1'
  
  print(f'Retrieving users from {company.upper()} Insperity...\n')
  response = requests.get(url=COMMUNICATION_URL, headers=HEADERS).json() 
  for employee in response['employees']:
    if employee['employmentStatus'] == 'HIRED': 
      allEmployees[employee['personId']] = employee

  response = requests.get(url=COMPANY_URL, headers=HEADERS).json()  
  for employee in response['employees']:
    if employee['personId'] in allEmployees: 
      allEmployees[employee['personId']]['company'] = employee['company']

  response = requests.get(url=POSITION_URL, headers=HEADERS).json()  
  for employee in response['employees']:
    if employee['personId'] in allEmployees: 
      allEmployees[employee['personId']]['position'] = employee['position']

  logger.debug(allEmployees)

  for employee in allEmployees:
    user = allEmployees[employee]
    #First, make sure the user has an email address (!! a requirement for Okta!!)
    if user['communication']['workEmail']:
      email = user['communication']['workEmail']
      manager = {'communication': {'workEmail': None}}
      if user['position']['supervisorId'] in allEmployees: manager = allEmployees[user['position']['supervisorId']]

      ### CREATE USER PROFILE OBJECT FOR OKTA
      USER['employeeNumber'] = user['personId']
      USER['firstName']      = EXCEPTIONS[email]['firstName'] if email in EXCEPTIONS else user['preferredName'].title() if user['preferredName'] else user['givenName'].title()
      USER['lastName']       = EXCEPTIONS[email]['lastName'] if email in EXCEPTIONS else user['familyName'].title()
      USER['displayName']    = USER["firstName"]+" "+USER["lastName"]
      USER['login']          = email
      USER['email']          = email
      USER['city']           = user['communication']['homeAddress']['city'].title()
      USER['state']          = user['communication']['homeAddress']['state']
      USER['title']          = user['position']['jobTitle'].title()
      USER['department']     = user['position']['department'].title()
      USER['manager']        = manager['communication']['workEmail'] or user['position']['supervisor'].title()
      USER['managerId']      = user['position']['supervisorId'] or None  
      USER['organization']   = user['company']['name'].title()
      properties = {
          "Title": {"title": [{"text": {"content": user['position']['jobTitle'].title() }}]},
          "First Name": {"type": "rich_text", "rich_text": [{"text": {"content": USER['firstName'] } }]},
          "Last Name": {"type": "rich_text", "rich_text": [{"text": {"content": USER['lastName']} }]},
          "Work Email": {"type": "email", "email": USER['email'] },
          "Personal Email": {"type": "email", "email": USER['email'] },
          "Manager": {"type": "rich_text", "rich_text": [{"text": {"content": USER['manager'] }}]},
          "Department": {"type": "rich_text", "rich_text": [{"text": {"content": USER['department'] }}]},
          "Employee Number": {"type": "number", "number": USER['employeeNumber'] },
      }
      # OKTA.user.profile['startDate']      = user['employment']['clientOriginalHireDate'].strftime("%Y-%m-%d")          
      parent={'type': 'database_id', 'database_id': DB_IDS[company.lower()]}
      ### UPDATE USER DATA IN OKTA
      logger.info(f"Updating {USER['email']}...")
      currentUser = NOTION.databases.query(DB_IDS[company.lower()], filter={"property": "Work Email", "email": { "equals": USER['email']}})
      if currentUser['results']:
        print(currentUser, properties) 
        page_id = currentUser['results'][0]['id']
        # logger.debug(f"New profile data:\n{OKTA.user.profile}")
        # logger.debug(f"Old profile in Okta:\n{currentUser.profile}")
        updatedUser = NOTION.pages.update(page_id, properties=properties)

        # if updatedUser: logger.info(f'Successfully updated {updatedUser.profile.display_name} ({updatedUser.profile.login})\n')
        if updatedUser: print(updatedUser)

        else: logger.error(f'User not updated in Okta. {currentUser}')
      else: updatedUser = NOTION.pages.create(parent=parent, properties=properties) 

  logger.info(f'Done with {len(allEmployees)} total employees')

loop = asyncio.get_event_loop()
if args.company != 'all': loop.run_until_complete(main(args.company))
else: [loop.run_until_complete(main(company)) for company in COMPANIES]
