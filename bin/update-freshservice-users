#!/usr/bin/env python3
# This script keeps freshservice users up to date
# Checks Okta for all deactivated users.  Deactivates corresponding user in Freshservice
# Checks for emails that do not belong to one of the 4C companies. Deactivates those users

HOME_DIR = '/opt/sysadmintools'
FRESHSERVICE_URL = 'https://4catalyzer.freshservice.com'
FRESHSERVICE_API_KEY = 'CIjFxd8dD2cT5Ko9ZU0'
COMPANIES = ['4catalyzer', 'detect', 'tesseract', 'aithera', 'proteinevo']
DOMAINS = ['4combinator.com', '4catalyzer.com', 'detect.com', 'tesseracthealth.com', 'ai-thera.com', 'pei.bio']

import sys; sys.path.insert(1, f'{HOME_DIR}/lib')
import logging
import asyncio
import requests
from pprint import pprint
from datetime import datetime
from Okta import Okta

## Create a log of this event
logging.basicConfig(
    filename=f'{HOME_DIR}/log/freshservice-{datetime.now().strftime("%Y-%m-%d-%H:%M")}.log', 
    filemode='w', 
    format='%(message)s',
  level=logging.INFO
)

async def main():
  ## Get all deactivated Okta users from each company  
  allDeactivatedUsers = []
  deactivated = {'filter': 'status eq "DEPROVISIONED"'} 
  for company in COMPANIES:
    OKTA = Okta(company)
    deactivatedUsers = await OKTA.getUsers(deactivated)
    for user in deactivatedUsers: allDeactivatedUsers.append(user.profile.email)
  logging.info(f'\n{len(allDeactivatedUsers)} deactivated users in all Okta companies')
  logging.info(pprint(allDeactivatedUsers))
  
  ## Get all requesters from Freshservice
  allRequesters = set()
  page_num = 1
  while True:
    response = requests.get(url=f"{FRESHSERVICE_URL}/api/v2/requesters?per_page=100&page={page_num}", auth=(FRESHSERVICE_API_KEY, 'X'))
    res = response.json() 
    for user in res['requesters']: 
      if user['active']: allRequesters.add((user['id'], user['primary_email'])) 
    if 'next' not in response.links: break
    page_num += 1
  logging.info(f'\n{len(allRequesters)} users in FreshService')
  logging.info(pprint(allRequesters))

  ##  Deactivate deactivated Okta users
  for user in allDeactivatedUsers: 
    logging.info(f'Deactivating {user}...'); print(f'Deactivating {user}...')
    requests.delete(url=f"{FRESHSERVICE_URL}/api/v2/requesters/{user}", auth=(FRESHSERVICE_API_KEY, 'X'))

  ##  Deactivate FreshService users who aren't with one of the companies
  for user in allRequesters: 
    if not any(domain in user[1] for domain in DOMAINS): 
      logging.info(f'Deactivating {user[1]}...'); print(f'Deactivating {user[1]}...')
      requests.delete(url=f"{FRESHSERVICE_URL}/api/v2/requesters/{user[0]}", auth=(FRESHSERVICE_API_KEY, 'X'))


loop = asyncio.get_event_loop()
loop.run_until_complete(main())