#!/usr/bin/env python3
import os
import sys
import logging
import asyncio
import argparse
import requests
from pathlib import Path
from pprint import pprint
from datetime import datetime
from openpyxl import load_workbook
from openpyxl.worksheet import worksheet

### The path to libraries need to be included
sys.path.insert(1, '/opt/sysadmintools/lib')
from Okta import Okta
from AWS import AWS

### Parse command arguments
parser = argparse.ArgumentParser()
parser.add_argument('-c', '--company', 
    help='provide name of one of the following companies: 4catalyzer, detect, tesseract, aithera, proteinevo',  
    metavar='' )
args = parser.parse_args()
if not args.company:
    print('You must include the company name as an argument. Use --help for more information')
    quit()

### Create a log of this event
logging.basicConfig(
    filename=f'/opt/sysadmintools/log/{datetime.now().strftime("%Y-%m-%d-%H:%M:%S")}-{args.company}-okta.log', 
    filemode='w', 
    format='%(message)s',
    level=logging.INFO
)

async def main():
    OKTA = Okta(args.company)
    OKTA.user.profile = {}
    allEmployees = {}

    ### CALL INSPERITY APIs
    A = AWS()
    API_KEY = A.getEnvVariable('/insperity/apiKey')
    ORG_IDS = {
        '4catalyzer': '4337300',
        'detect': '4590900',
        'tesseract': '4591000',
        'aithera': '4337600',
        'proteinevo': '5068600'
    }
    HEADERS = {'Authorization': f'APIKey {API_KEY}'}
    COMMUNICATION_URL = f'https://api.insperity.com/public/company/{ORG_IDS[args.company.lower()]}/employeescommunication/v1'
    COMPANY_URL = f'https://api.insperity.com/public/company/{ORG_IDS[args.company.lower()]}/employeescompany/v1'
    POSITION_URL = f'https://api.insperity.com/public/company/{ORG_IDS[args.company.lower()]}/employeesposition/v1'

    print('Retrieving users from Insperity...')
    response = requests.get(url=COMMUNICATION_URL, headers=HEADERS)
    logging.debug(response.text)
    response = response.json() 
    for employee in response['employees']:
        if employee['employmentStatus'] == 'HIRED': 
            allEmployees[employee['personId']] = employee

    response = requests.get(url=COMPANY_URL, headers=HEADERS).json()  
    for employee in response['employees']:
        if employee['personId'] in allEmployees: 
            allEmployees[employee['personId']]['company'] = employee['company']

    response = requests.get(url=POSITION_URL, headers=HEADERS).json()  
    for employee in response['employees']:
        if employee['personId'] in allEmployees: 
            allEmployees[employee['personId']]['position'] = employee['position']

    logging.debug(allEmployees)

    for employee in allEmployees:
        user = allEmployees[employee]
        exceptions = {
            'psoler@tesseracthealth.com': {'firstName': 'Pablo', 'lastName': 'Soler'},
            'vdemas@tesseracthealth.com': {'firstName': 'Vicky', 'lastName': 'Demas'},
            'vparillo@tesseracthealth.com': {'firstName': 'Vin', 'lastName': 'Parillo'},
            'cmcnulty@tesseracthealth.com': {'firstName': 'Chris', 'lastName': 'McNulty'},
        }

        #First, make sure the user has an email address (!! a requirement for Okta!!)
        if user['communication']['workEmail']:
            email = user['communication']['workEmail']
            manager = {'communication': {'workEmail': None}}
            if user['position']['supervisorId'] in allEmployees: manager = allEmployees[user['position']['supervisorId']]

            ### CREATE USER PROFILE OBJECT FOR OKTA
            OKTA.user.profile['employeeNumber'] = user['personId']
            OKTA.user.profile['firstName']      = exceptions[email]['firstName'] if email in exceptions else user['preferredName'].title() if user['preferredName'] else user['givenName'].title()
            OKTA.user.profile['lastName']       = exceptions[email]['lastName'] if email in exceptions else user['familyName'].title()
            OKTA.user.profile['displayName']    = OKTA.user.profile["firstName"]+" "+OKTA.user.profile["lastName"]
            OKTA.user.profile['login']          = email
            OKTA.user.profile['email']          = email
            OKTA.user.profile['city']           = user['communication']['homeAddress']['city'].title()
            #OKTA.user.profile['city']           = ""
            OKTA.user.profile['state']          = user['communication']['homeAddress']['state']
            OKTA.user.profile['title']          = user['position']['jobTitle'].title()
            OKTA.user.profile['department']     = user['position']['department'].title()
            OKTA.user.profile['manager']        = manager['communication']['workEmail'] or user['position']['supervisor'].title()
            OKTA.user.profile['managerId']      = user['position']['supervisorId'] or None  
            OKTA.user.profile['organization']   = user['company']['name'].title()
            # OKTA.user.profile['startDate']      = user['employment']['clientOriginalHireDate'].strftime("%Y-%m-%d")
            
        
            ### CONFIRM USER READY TO UPDATE (UNCOMMENT SECTION TO GO ONE BY ONE)
            #logging.info('User ready to update')
            
            #pprint(OKTA.user.profile)
            #startUpdate = input('Press ENTER to update this user. Type S to Skip. ANY other key to Quit: ')     
            #if not startUpdate: pass 
            #elif startUpdate.lower() == 's':
            #    logging.info(f"Skipped {OKTA.user.profile['email']}...")
            #    print(f"Skipping {OKTA.user.profile['email']}...")
            #    continue
            #else: 
            #    logging.info(f"Quit Program")
            #    print('Quitting...')
            #    quit()
    
            ### UPDATE USER DATA IN OKTA
            print(f"Updating {OKTA.user.profile['email']}...")
            logging.info(f"Updating {OKTA.user.profile['email']}...")

            currentUser = await OKTA.getUser(OKTA.user.profile['email'])
            if currentUser: 
                logging.info(f"New profile data:\n{OKTA.user.profile}")
                logging.info(f"Old profile in Okta:\n{currentUser.profile}")
                updatedUser = await OKTA.updateUser(currentUser.id, OKTA.user)
                if updatedUser: 
                    print(f'Successfully updated {updatedUser.profile.display_name} ({updatedUser.profile.login})\n')
                    logging.info(f'Successfully updated {updatedUser.profile.display_name} ({updatedUser.profile.login})\n')
                else: 
                    print('User not updated in Okta. Check logs.')
                    logging.error(f'User not updated in Okta. {currentUser}')
            else: 
                logging.info(f"Did not find user in Okta: {OKTA.user.profile['email']}")
                print('Did not retrieve current user from Okta.')  

    logging.info(f'Done with {len(allEmployees)} total employees')
    print(f'Done with {len(allEmployees)} total employees')

loop = asyncio.get_event_loop()
loop.run_until_complete(main())
