#!/usr/bin/env python3

### [S3.9] S3 bucket server access logging should be enabled
### This control checks if an Amazon S3 Bucket has server access logging enabled to a chosen target bucket. 

import os; SYSADMINTOOLS_DIR = os.getenv('SYSADMINTOOLS_DIR')
import sys; sys.path.insert(1, f'{SYSADMINTOOLS_DIR}/lib')
from datetime import datetime
import argparse
import logging
from AWS import AWS

### PARSE ARGUMENTS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
parser = argparse.ArgumentParser()

parser.add_argument('-t', '--target', 
    help='REQUIRED: S3 bucket name where access logs will be stored',  
    metavar=''
)
parser.add_argument('-b', '--buckets', 
    help='Comma-separated list of S3 buckets. If no buckets argument, all buckets will have encryption enabled.',  
    metavar=''
)
parser.add_argument('-p', '--prefix', 
    help='A prefix for all log object keys. Default is s3-access-logs/<bucketName>/',  
    metavar=''
)
args = parser.parse_args()
if not args.target:
    print('You have not entered the name of the S3 bucket where logs will be stored. Use --help for more information')
    sys.exit()

### LOGGER FUNCTION >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
logging.basicConfig(
    filename=f'{SYSADMINTOOLS_DIR}/log/{datetime.now().strftime("%Y-%m-%d-%H:%M")}-aws-s3-enable-bucket-access-logging.log', 
    filemode='w', 
    format='%(message)s',
    level=logging.INFO
)
# Print all logs to screen
logging.getLogger().addHandler(logging.StreamHandler(sys.stdout))


### MAIN FUNCTION >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
def main():
    S3_BUCKETS = [ AWS().getBucket(args.buckets) ] if args.buckets else AWS().listBuckets()
    
    for bucket in S3_BUCKETS:
        loggingEnabled = AWS().getBucketLoggingStatus(bucket.name)
        if loggingEnabled: 
            logging.warning(f'WARN: {bucket.name} already has logging enabled.\n{loggingEnabled}')
            logging.warning(f'WARN: Skipping {bucket.name}\n')
        elif AWS().enableBucketLogging(bucket.name, args.target):
            logging.info(f"INFO: Access logging now enabled on {bucket.name}\n")
        else: 
            logging.info(f"ERROR: Access logging not enabled on {bucket.name}.\n")

if __name__ == '__main__': main()