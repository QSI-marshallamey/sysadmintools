#!/usr/bin/env python3

### [S3.13] S3 buckets should have lifecycle policies configured
### This control checks if a lifecycle policy is configured for an Amazon S3 bucket. 
### This control fails if a lifecycle policy is not configured for an S3 bucket.

import os; SYSADMINTOOLS_DIR = os.getenv('SYSADMINTOOLS_DIR')
import sys; sys.path.insert(1, f'{SYSADMINTOOLS_DIR}/lib')
from datetime import datetime
import argparse
import logging
from AWS import AWS

### PARSE ARGUMENTS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
parser = argparse.ArgumentParser()
parser.add_argument('-b', '--buckets', 
    help='Comma-separated list of the S3 bucket names. If no buckets argument, all buckets will have SSL enforced.',  
    metavar=''
)
args = parser.parse_args()


### LOGGER FUNCTION >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
logging.basicConfig(
    filename=f'{SYSADMINTOOLS_DIR}/log/{datetime.now().strftime("%Y-%m-%d-%H:%M")}-aws-s3-configure-lifecycle-policy.log', 
    filemode='w', 
    format='%(message)s',
    level=logging.INFO
)
# Print all logs to screen
logging.getLogger().addHandler(logging.StreamHandler(sys.stdout))


### MAIN FUNCTION >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
def main():
    BLANK_POLICY = {
        'Rules': []
    }
    DEFAULT_RULE =  {
        'ID': 'Intelligent Tiering',
        'Status': 'Enabled',
        'Transitions': [
            {
                'Days': 30,
                'StorageClass': 'INTELLIGENT_TIERING'
            }
        ],
        'NoncurrentVersionTransitions': [
            {
                'NoncurrentDays': 7,
                'StorageClass': 'GLACIER_IR',
                'NewerNoncurrentVersions': 1
            }
        ]
    }
    

    S3_BUCKETS = [ AWS().getBucket(args.buckets) ] if args.buckets else AWS().listBuckets()
    for bucket in S3_BUCKETS:
        policy = AWS().getLifecyclePolicy(bucket.name)

        if policy: updatedPolicy = policy['Rules'].append(DEFAULT_RULE)
        else: updatedPolicy = BLANK_POLICY['Rules'].append(DEFAULT_RULE)

        if AWS().setLifecyclePolicy(bucket.name, updatedPolicy):
            logging.info(f"INFO: SSL now enforced on {bucket.name}\n")
        else: logging.info(f"ERROR: SSL not enforced on {bucket.name}.\n")

if __name__ == '__main__': main()